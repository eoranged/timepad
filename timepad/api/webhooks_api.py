# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from timepad.api_client import ApiClient


class WebhooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_hook(self, organization_id, **kwargs):  # noqa: E501
        """Создать webhook для организации  # noqa: E501

        Позволяет добавить новый webhook в организацию. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_hook(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param CreateHook body: Описание добавляемого webhook'а
        :return: WebhooksApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_hook_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_hook_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def add_hook_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Создать webhook для организации  # noqa: E501

        Позволяет добавить новый webhook в организацию. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_hook_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param CreateHook body: Описание добавляемого webhook'а
        :return: WebhooksApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_hook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `add_hook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/organizations/{organization_id}/hooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhooksApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_hook(self, organization_id, hook_id, **kwargs):  # noqa: E501
        """Изменить webhook  # noqa: E501

        Позволяет изменить webhook в организации. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_hook(organization_id, hook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param int hook_id: Идентификатор webhook'а (required)
        :param EditHook body: Поля для обновления webhook'а
        :return: WebhookApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_hook_with_http_info(organization_id, hook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_hook_with_http_info(organization_id, hook_id, **kwargs)  # noqa: E501
            return data

    def edit_hook_with_http_info(self, organization_id, hook_id, **kwargs):  # noqa: E501
        """Изменить webhook  # noqa: E501

        Позволяет изменить webhook в организации. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_hook_with_http_info(organization_id, hook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param int hook_id: Идентификатор webhook'а (required)
        :param EditHook body: Поля для обновления webhook'а
        :return: WebhookApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'hook_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_hook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `edit_hook`")  # noqa: E501
        # verify the required parameter 'hook_id' is set
        if ('hook_id' not in params or
                params['hook_id'] is None):
            raise ValueError("Missing the required parameter `hook_id` when calling `edit_hook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'hook_id' in params:
            path_params['hook_id'] = params['hook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/organizations/{organization_id}/hooks/{hook_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hook(self, organization_id, hook_id, **kwargs):  # noqa: E501
        """Получить webhook по ID  # noqa: E501

        Позволяет получить информацию о добавленном для организации webhook'е. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hook(organization_id, hook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param int hook_id: Идентификатор webhook'а (required)
        :return: WebhookApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hook_with_http_info(organization_id, hook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hook_with_http_info(organization_id, hook_id, **kwargs)  # noqa: E501
            return data

    def get_hook_with_http_info(self, organization_id, hook_id, **kwargs):  # noqa: E501
        """Получить webhook по ID  # noqa: E501

        Позволяет получить информацию о добавленном для организации webhook'е. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hook_with_http_info(organization_id, hook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param int hook_id: Идентификатор webhook'а (required)
        :return: WebhookApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'hook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `get_hook`")  # noqa: E501
        # verify the required parameter 'hook_id' is set
        if ('hook_id' not in params or
                params['hook_id'] is None):
            raise ValueError("Missing the required parameter `hook_id` when calling `get_hook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'hook_id' in params:
            path_params['hook_id'] = params['hook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/organizations/{organization_id}/hooks/{hook_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hooks(self, organization_id, **kwargs):  # noqa: E501
        """Получить список webhook'ов  # noqa: E501

        Позволяет получить список webhook'ов для указанной организации. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hooks(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param str type: Тип получаемых webhook'ов
        :return: WebhooksApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hooks_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hooks_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_hooks_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Получить список webhook'ов  # noqa: E501

        Позволяет получить список webhook'ов для указанной организации. Подробнее о системе хуков и ее использовании можно прочитать в статье http://dev.timepad.ru/api/hooks/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hooks_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Идентификатор организации (required)
        :param str type: Тип получаемых webhook'ов
        :return: WebhooksApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `get_hooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/organizations/{organization_id}/hooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhooksApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

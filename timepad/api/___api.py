# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from timepad.api_client import ApiClient


class _Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def event_companies_list(self, event_id, **kwargs):  # noqa: E501
        """Получить список реквизитов компаний  # noqa: E501

        Список реквизитов юридических лиц, которые запросили счет для оплаты заказов от юрлица. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_companies_list(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int limit: Сколько элементов списка вывести
        :param int skip: С какого элемента списка начать вывод
        :return: CompaniesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_companies_list_with_http_info(event_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_companies_list_with_http_info(event_id, **kwargs)  # noqa: E501
            return data

    def event_companies_list_with_http_info(self, event_id, **kwargs):  # noqa: E501
        """Получить список реквизитов компаний  # noqa: E501

        Список реквизитов юридических лиц, которые запросили счет для оплаты заказов от юрлица. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_companies_list_with_http_info(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int limit: Сколько элементов списка вывести
        :param int skip: С какого элемента списка начать вывод
        :return: CompaniesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'limit', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_companies_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_companies_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events/{event_id}/companies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompaniesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_company(self, event_id, company_id, **kwargs):  # noqa: E501
        """Получить реквизиты юрлица по ID  # noqa: E501

        Реквизиты юридического лица, запросившего счет для оплаты заказа от юрлица. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company(event_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int company_id: Номер реквизитов (required)
        :return: CompanyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_company_with_http_info(event_id, company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_company_with_http_info(event_id, company_id, **kwargs)  # noqa: E501
            return data

    def event_company_with_http_info(self, event_id, company_id, **kwargs):  # noqa: E501
        """Получить реквизиты юрлица по ID  # noqa: E501

        Реквизиты юридического лица, запросившего счет для оплаты заказа от юрлица. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_with_http_info(event_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int company_id: Номер реквизитов (required)
        :return: CompanyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_company`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `event_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']  # noqa: E501
        if 'company_id' in params:
            path_params['company_id'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events/{event_id}/companies/{company_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_company_payments(self, event_id, **kwargs):  # noqa: E501
        """Получить запросы на оплату от юрлица  # noqa: E501

        Список запросов на оплату заказов от юрлица. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int limit: Сколько элементов списка вывести
        :param int skip: С какого элемента списка начать вывод
        :return: CompanyPaymentRequestsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_company_payments_with_http_info(event_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_company_payments_with_http_info(event_id, **kwargs)  # noqa: E501
            return data

    def event_company_payments_with_http_info(self, event_id, **kwargs):  # noqa: E501
        """Получить запросы на оплату от юрлица  # noqa: E501

        Список запросов на оплату заказов от юрлица. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_with_http_info(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int limit: Сколько элементов списка вывести
        :param int skip: С какого элемента списка начать вывод
        :return: CompanyPaymentRequestsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'limit', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_company_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_company_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events/{event_id}/company_payment_requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyPaymentRequestsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_company_payments_0(self, event_id, company_payment_request_id, **kwargs):  # noqa: E501
        """Получить запросы на оплату от юрлица по ID  # noqa: E501

        Информация о запросе на оплату заказа от конкретного юрлица. Одно юрлицо может подать несколько разных запросов на оплату одного и того же события. Список заказов, которые привязаны к запросу не детерминированный, т.е. это догадка системы о том, какие именно заказы оплачиваются данным запросом. В реальности эти заказы могуть быть другими. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_0(event_id, company_payment_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int company_payment_request_id: Номер реквизитов компании (required)
        :return: CompanyPaymentRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_company_payments_0_with_http_info(event_id, company_payment_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_company_payments_0_with_http_info(event_id, company_payment_request_id, **kwargs)  # noqa: E501
            return data

    def event_company_payments_0_with_http_info(self, event_id, company_payment_request_id, **kwargs):  # noqa: E501
        """Получить запросы на оплату от юрлица по ID  # noqa: E501

        Информация о запросе на оплату заказа от конкретного юрлица. Одно юрлицо может подать несколько разных запросов на оплату одного и того же события. Список заказов, которые привязаны к запросу не детерминированный, т.е. это догадка системы о том, какие именно заказы оплачиваются данным запросом. В реальности эти заказы могуть быть другими. Доступно только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_0_with_http_info(event_id, company_payment_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int company_payment_request_id: Номер реквизитов компании (required)
        :return: CompanyPaymentRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'company_payment_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_company_payments_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_company_payments_0`")  # noqa: E501
        # verify the required parameter 'company_payment_request_id' is set
        if ('company_payment_request_id' not in params or
                params['company_payment_request_id'] is None):
            raise ValueError("Missing the required parameter `company_payment_request_id` when calling `event_company_payments_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']  # noqa: E501
        if 'company_payment_request_id' in params:
            path_params['company_payment_request_id'] = params['company_payment_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events/{event_id}/company_payment_requests/{company_payment_request_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyPaymentRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_company_payments_1(self, event_id, **kwargs):  # noqa: E501
        """Получить выставленные счета  # noqa: E501

        Метод возвращает список выставленных счетов в ответ на запросы компаний об оплате заказов от юрлиц. Метод доступен только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_1(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int limit: Сколько элементов списка вывести
        :param int skip: С какого элемента списка начать вывод
        :return: InvoicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_company_payments_1_with_http_info(event_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_company_payments_1_with_http_info(event_id, **kwargs)  # noqa: E501
            return data

    def event_company_payments_1_with_http_info(self, event_id, **kwargs):  # noqa: E501
        """Получить выставленные счета  # noqa: E501

        Метод возвращает список выставленных счетов в ответ на запросы компаний об оплате заказов от юрлиц. Метод доступен только организаторам с доступом к финансовой информации.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_1_with_http_info(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int limit: Сколько элементов списка вывести
        :param int skip: С какого элемента списка начать вывод
        :return: InvoicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'limit', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_company_payments_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_company_payments_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events/{event_id}/invoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_company_payments_2(self, event_id, invoice_id, **kwargs):  # noqa: E501
        """Получить счет по ID  # noqa: E501

        Метод возвращает информацию о выставленном счете для оплаты от юрлица.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_2(event_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int invoice_id: Номер счета (required)
        :return: InvoiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_company_payments_2_with_http_info(event_id, invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_company_payments_2_with_http_info(event_id, invoice_id, **kwargs)  # noqa: E501
            return data

    def event_company_payments_2_with_http_info(self, event_id, invoice_id, **kwargs):  # noqa: E501
        """Получить счет по ID  # noqa: E501

        Метод возвращает информацию о выставленном счете для оплаты от юрлица.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_company_payments_2_with_http_info(event_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Номер события (required)
        :param int invoice_id: Номер счета (required)
        :return: InvoiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'invoice_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_company_payments_2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_company_payments_2`")  # noqa: E501
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `event_company_payments_2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']  # noqa: E501
        if 'invoice_id' in params:
            path_params['invoice_id'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['timepad_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/v1/events/{event_id}/invoices/{invoice_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoiceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InvoiceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company_payment_request_id': 'int',
        'invoice_num': 'int',
        'tickets_count': 'int',
        'amount': 'float',
        'amount_in_words': 'str',
        'status': 'str',
        'orders': 'list[int]',
        'created_at': 'str',
        'paid_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'company_payment_request_id': 'company_payment_request_id',
        'invoice_num': 'invoice_num',
        'tickets_count': 'tickets_count',
        'amount': 'amount',
        'amount_in_words': 'amount_in_words',
        'status': 'status',
        'orders': 'orders',
        'created_at': 'created_at',
        'paid_at': 'paid_at'
    }

    def __init__(self, id=None, company_payment_request_id=None, invoice_num=None, tickets_count=None, amount=None, amount_in_words=None, status=None, orders=None, created_at=None, paid_at=None):  # noqa: E501
        """InvoiceResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_payment_request_id = None
        self._invoice_num = None
        self._tickets_count = None
        self._amount = None
        self._amount_in_words = None
        self._status = None
        self._orders = None
        self._created_at = None
        self._paid_at = None
        self.discriminator = None
        self.id = id
        self.company_payment_request_id = company_payment_request_id
        self.invoice_num = invoice_num
        self.tickets_count = tickets_count
        self.amount = amount
        if amount_in_words is not None:
            self.amount_in_words = amount_in_words
        if status is not None:
            self.status = status
        if orders is not None:
            self.orders = orders
        if created_at is not None:
            self.created_at = created_at
        if paid_at is not None:
            self.paid_at = paid_at

    @property
    def id(self):
        """Gets the id of this InvoiceResponse.  # noqa: E501

        Уникальный номер платежа  # noqa: E501

        :return: The id of this InvoiceResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceResponse.

        Уникальный номер платежа  # noqa: E501

        :param id: The id of this InvoiceResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def company_payment_request_id(self):
        """Gets the company_payment_request_id of this InvoiceResponse.  # noqa: E501

        Номер запроса оплаты компанией  # noqa: E501

        :return: The company_payment_request_id of this InvoiceResponse.  # noqa: E501
        :rtype: int
        """
        return self._company_payment_request_id

    @company_payment_request_id.setter
    def company_payment_request_id(self, company_payment_request_id):
        """Sets the company_payment_request_id of this InvoiceResponse.

        Номер запроса оплаты компанией  # noqa: E501

        :param company_payment_request_id: The company_payment_request_id of this InvoiceResponse.  # noqa: E501
        :type: int
        """
        if company_payment_request_id is None:
            raise ValueError("Invalid value for `company_payment_request_id`, must not be `None`")  # noqa: E501

        self._company_payment_request_id = company_payment_request_id

    @property
    def invoice_num(self):
        """Gets the invoice_num of this InvoiceResponse.  # noqa: E501

        Номер платёжного документа  # noqa: E501

        :return: The invoice_num of this InvoiceResponse.  # noqa: E501
        :rtype: int
        """
        return self._invoice_num

    @invoice_num.setter
    def invoice_num(self, invoice_num):
        """Sets the invoice_num of this InvoiceResponse.

        Номер платёжного документа  # noqa: E501

        :param invoice_num: The invoice_num of this InvoiceResponse.  # noqa: E501
        :type: int
        """
        if invoice_num is None:
            raise ValueError("Invalid value for `invoice_num`, must not be `None`")  # noqa: E501

        self._invoice_num = invoice_num

    @property
    def tickets_count(self):
        """Gets the tickets_count of this InvoiceResponse.  # noqa: E501

        Количество билетов  # noqa: E501

        :return: The tickets_count of this InvoiceResponse.  # noqa: E501
        :rtype: int
        """
        return self._tickets_count

    @tickets_count.setter
    def tickets_count(self, tickets_count):
        """Sets the tickets_count of this InvoiceResponse.

        Количество билетов  # noqa: E501

        :param tickets_count: The tickets_count of this InvoiceResponse.  # noqa: E501
        :type: int
        """
        if tickets_count is None:
            raise ValueError("Invalid value for `tickets_count`, must not be `None`")  # noqa: E501

        self._tickets_count = tickets_count

    @property
    def amount(self):
        """Gets the amount of this InvoiceResponse.  # noqa: E501

        Сумма платежа  # noqa: E501

        :return: The amount of this InvoiceResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceResponse.

        Сумма платежа  # noqa: E501

        :param amount: The amount of this InvoiceResponse.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def amount_in_words(self):
        """Gets the amount_in_words of this InvoiceResponse.  # noqa: E501

        Сумма платежа словами  # noqa: E501

        :return: The amount_in_words of this InvoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._amount_in_words

    @amount_in_words.setter
    def amount_in_words(self, amount_in_words):
        """Sets the amount_in_words of this InvoiceResponse.

        Сумма платежа словами  # noqa: E501

        :param amount_in_words: The amount_in_words of this InvoiceResponse.  # noqa: E501
        :type: str
        """

        self._amount_in_words = amount_in_words

    @property
    def status(self):
        """Gets the status of this InvoiceResponse.  # noqa: E501

        Статус платежа  # noqa: E501

        :return: The status of this InvoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvoiceResponse.

        Статус платежа  # noqa: E501

        :param status: The status of this InvoiceResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def orders(self):
        """Gets the orders of this InvoiceResponse.  # noqa: E501

        Номера заказов  # noqa: E501

        :return: The orders of this InvoiceResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this InvoiceResponse.

        Номера заказов  # noqa: E501

        :param orders: The orders of this InvoiceResponse.  # noqa: E501
        :type: list[int]
        """

        self._orders = orders

    @property
    def created_at(self):
        """Gets the created_at of this InvoiceResponse.  # noqa: E501

        Дата создания платежа  # noqa: E501

        :return: The created_at of this InvoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InvoiceResponse.

        Дата создания платежа  # noqa: E501

        :param created_at: The created_at of this InvoiceResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def paid_at(self):
        """Gets the paid_at of this InvoiceResponse.  # noqa: E501

        Дата оплаты платежа  # noqa: E501

        :return: The paid_at of this InvoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._paid_at

    @paid_at.setter
    def paid_at(self, paid_at):
        """Sets the paid_at of this InvoiceResponse.

        Дата оплаты платежа  # noqa: E501

        :param paid_at: The paid_at of this InvoiceResponse.  # noqa: E501
        :type: str
        """

        self._paid_at = paid_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

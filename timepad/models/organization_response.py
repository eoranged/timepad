# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.image_response import ImageResponse  # noqa: F401,E501


class OrganizationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description_html': 'str',
        'url': 'str',
        'logo_image': 'ImageResponse',
        'subdomain': 'str',
        'permissions': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description_html': 'description_html',
        'url': 'url',
        'logo_image': 'logo_image',
        'subdomain': 'subdomain',
        'permissions': 'permissions'
    }

    def __init__(self, id=None, name=None, description_html=None, url=None, logo_image=None, subdomain=None, permissions=None):  # noqa: E501
        """OrganizationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description_html = None
        self._url = None
        self._logo_image = None
        self._subdomain = None
        self._permissions = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.description_html = description_html
        self.url = url
        self.logo_image = logo_image
        self.subdomain = subdomain
        if permissions is not None:
            self.permissions = permissions

    @property
    def id(self):
        """Gets the id of this OrganizationResponse.  # noqa: E501

        Номер организации  # noqa: E501

        :return: The id of this OrganizationResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationResponse.

        Номер организации  # noqa: E501

        :param id: The id of this OrganizationResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrganizationResponse.  # noqa: E501

        Название организации  # noqa: E501

        :return: The name of this OrganizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationResponse.

        Название организации  # noqa: E501

        :param name: The name of this OrganizationResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description_html(self):
        """Gets the description_html of this OrganizationResponse.  # noqa: E501

        Описание организации  # noqa: E501

        :return: The description_html of this OrganizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_html

    @description_html.setter
    def description_html(self, description_html):
        """Sets the description_html of this OrganizationResponse.

        Описание организации  # noqa: E501

        :param description_html: The description_html of this OrganizationResponse.  # noqa: E501
        :type: str
        """
        if description_html is None:
            raise ValueError("Invalid value for `description_html`, must not be `None`")  # noqa: E501

        self._description_html = description_html

    @property
    def url(self):
        """Gets the url of this OrganizationResponse.  # noqa: E501

        URL организации на сайте  # noqa: E501

        :return: The url of this OrganizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrganizationResponse.

        URL организации на сайте  # noqa: E501

        :param url: The url of this OrganizationResponse.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def logo_image(self):
        """Gets the logo_image of this OrganizationResponse.  # noqa: E501


        :return: The logo_image of this OrganizationResponse.  # noqa: E501
        :rtype: ImageResponse
        """
        return self._logo_image

    @logo_image.setter
    def logo_image(self, logo_image):
        """Sets the logo_image of this OrganizationResponse.


        :param logo_image: The logo_image of this OrganizationResponse.  # noqa: E501
        :type: ImageResponse
        """
        if logo_image is None:
            raise ValueError("Invalid value for `logo_image`, must not be `None`")  # noqa: E501

        self._logo_image = logo_image

    @property
    def subdomain(self):
        """Gets the subdomain of this OrganizationResponse.  # noqa: E501

        URL-идентификатор организации в Таймпаде (***.timepad.ru)  # noqa: E501

        :return: The subdomain of this OrganizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this OrganizationResponse.

        URL-идентификатор организации в Таймпаде (***.timepad.ru)  # noqa: E501

        :param subdomain: The subdomain of this OrganizationResponse.  # noqa: E501
        :type: str
        """
        if subdomain is None:
            raise ValueError("Invalid value for `subdomain`, must not be `None`")  # noqa: E501

        self._subdomain = subdomain

    @property
    def permissions(self):
        """Gets the permissions of this OrganizationResponse.  # noqa: E501

        Настройки доступов для организаций  # noqa: E501

        :return: The permissions of this OrganizationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OrganizationResponse.

        Настройки доступов для организаций  # noqa: E501

        :param permissions: The permissions of this OrganizationResponse.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.company_bank_account_response import CompanyBankAccountResponse  # noqa: F401,E501


class CompanyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'date',
        'inn': 'date',
        'legal_address': 'date',
        'actual_address': 'date',
        'bank_account': 'list[CompanyBankAccountResponse]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'inn': 'inn',
        'legal_address': 'legal_address',
        'actual_address': 'actual_address',
        'bank_account': 'bank_account'
    }

    def __init__(self, id=None, name=None, inn=None, legal_address=None, actual_address=None, bank_account=None):  # noqa: E501
        """CompanyResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._inn = None
        self._legal_address = None
        self._actual_address = None
        self._bank_account = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.inn = inn
        self.legal_address = legal_address
        self.actual_address = actual_address
        if bank_account is not None:
            self.bank_account = bank_account

    @property
    def id(self):
        """Gets the id of this CompanyResponse.  # noqa: E501

        Уникальный номер реквизитов компании  # noqa: E501

        :return: The id of this CompanyResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyResponse.

        Уникальный номер реквизитов компании  # noqa: E501

        :param id: The id of this CompanyResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CompanyResponse.  # noqa: E501

        Название компании  # noqa: E501

        :return: The name of this CompanyResponse.  # noqa: E501
        :rtype: date
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyResponse.

        Название компании  # noqa: E501

        :param name: The name of this CompanyResponse.  # noqa: E501
        :type: date
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def inn(self):
        """Gets the inn of this CompanyResponse.  # noqa: E501

        ИНН компании  # noqa: E501

        :return: The inn of this CompanyResponse.  # noqa: E501
        :rtype: date
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this CompanyResponse.

        ИНН компании  # noqa: E501

        :param inn: The inn of this CompanyResponse.  # noqa: E501
        :type: date
        """
        if inn is None:
            raise ValueError("Invalid value for `inn`, must not be `None`")  # noqa: E501

        self._inn = inn

    @property
    def legal_address(self):
        """Gets the legal_address of this CompanyResponse.  # noqa: E501

        Юридический адрес компании  # noqa: E501

        :return: The legal_address of this CompanyResponse.  # noqa: E501
        :rtype: date
        """
        return self._legal_address

    @legal_address.setter
    def legal_address(self, legal_address):
        """Sets the legal_address of this CompanyResponse.

        Юридический адрес компании  # noqa: E501

        :param legal_address: The legal_address of this CompanyResponse.  # noqa: E501
        :type: date
        """
        if legal_address is None:
            raise ValueError("Invalid value for `legal_address`, must not be `None`")  # noqa: E501

        self._legal_address = legal_address

    @property
    def actual_address(self):
        """Gets the actual_address of this CompanyResponse.  # noqa: E501

        Фактический адрес компании  # noqa: E501

        :return: The actual_address of this CompanyResponse.  # noqa: E501
        :rtype: date
        """
        return self._actual_address

    @actual_address.setter
    def actual_address(self, actual_address):
        """Sets the actual_address of this CompanyResponse.

        Фактический адрес компании  # noqa: E501

        :param actual_address: The actual_address of this CompanyResponse.  # noqa: E501
        :type: date
        """
        if actual_address is None:
            raise ValueError("Invalid value for `actual_address`, must not be `None`")  # noqa: E501

        self._actual_address = actual_address

    @property
    def bank_account(self):
        """Gets the bank_account of this CompanyResponse.  # noqa: E501

        Информация о банке компании  # noqa: E501

        :return: The bank_account of this CompanyResponse.  # noqa: E501
        :rtype: list[CompanyBankAccountResponse]
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this CompanyResponse.

        Информация о банке компании  # noqa: E501

        :param bank_account: The bank_account of this CompanyResponse.  # noqa: E501
        :type: list[CompanyBankAccountResponse]
        """

        self._bank_account = bank_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

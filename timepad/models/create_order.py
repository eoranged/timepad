# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.ticket_include import TicketInclude  # noqa: F401,E501


class CreateOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tickets': 'list[TicketInclude]',
        'answers': 'dict(str, str)',
        'promocodes': 'list[str]',
        'subscribed_to_newsletter': 'bool'
    }

    attribute_map = {
        'tickets': 'tickets',
        'answers': 'answers',
        'promocodes': 'promocodes',
        'subscribed_to_newsletter': 'subscribed_to_newsletter'
    }

    def __init__(self, tickets=None, answers=None, promocodes=None, subscribed_to_newsletter=None):  # noqa: E501
        """CreateOrder - a model defined in Swagger"""  # noqa: E501
        self._tickets = None
        self._answers = None
        self._promocodes = None
        self._subscribed_to_newsletter = None
        self.discriminator = None
        self.tickets = tickets
        self.answers = answers
        if promocodes is not None:
            self.promocodes = promocodes
        if subscribed_to_newsletter is not None:
            self.subscribed_to_newsletter = subscribed_to_newsletter

    @property
    def tickets(self):
        """Gets the tickets of this CreateOrder.  # noqa: E501

        Список видов билетов  # noqa: E501

        :return: The tickets of this CreateOrder.  # noqa: E501
        :rtype: list[TicketInclude]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this CreateOrder.

        Список видов билетов  # noqa: E501

        :param tickets: The tickets of this CreateOrder.  # noqa: E501
        :type: list[TicketInclude]
        """
        if tickets is None:
            raise ValueError("Invalid value for `tickets`, must not be `None`")  # noqa: E501

        self._tickets = tickets

    @property
    def answers(self):
        """Gets the answers of this CreateOrder.  # noqa: E501

        Список видов билетов  # noqa: E501

        :return: The answers of this CreateOrder.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this CreateOrder.

        Список видов билетов  # noqa: E501

        :param answers: The answers of this CreateOrder.  # noqa: E501
        :type: dict(str, str)
        """
        if answers is None:
            raise ValueError("Invalid value for `answers`, must not be `None`")  # noqa: E501

        self._answers = answers

    @property
    def promocodes(self):
        """Gets the promocodes of this CreateOrder.  # noqa: E501

        Промокоды  # noqa: E501

        :return: The promocodes of this CreateOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._promocodes

    @promocodes.setter
    def promocodes(self, promocodes):
        """Sets the promocodes of this CreateOrder.

        Промокоды  # noqa: E501

        :param promocodes: The promocodes of this CreateOrder.  # noqa: E501
        :type: list[str]
        """

        self._promocodes = promocodes

    @property
    def subscribed_to_newsletter(self):
        """Gets the subscribed_to_newsletter of this CreateOrder.  # noqa: E501

        Подписка на анонсы событий организатора  # noqa: E501

        :return: The subscribed_to_newsletter of this CreateOrder.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed_to_newsletter

    @subscribed_to_newsletter.setter
    def subscribed_to_newsletter(self, subscribed_to_newsletter):
        """Sets the subscribed_to_newsletter of this CreateOrder.

        Подписка на анонсы событий организатора  # noqa: E501

        :param subscribed_to_newsletter: The subscribed_to_newsletter of this CreateOrder.  # noqa: E501
        :type: bool
        """

        self._subscribed_to_newsletter = subscribed_to_newsletter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

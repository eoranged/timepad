# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.category_include import CategoryInclude  # noqa: F401,E501
from timepad.models.location_include import LocationInclude  # noqa: F401,E501
from timepad.models.question_include import QuestionInclude  # noqa: F401,E501
from timepad.models.ticket_type_request import TicketTypeRequest  # noqa: F401,E501


class EditEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_types': 'list[TicketTypeRequest]',
        'name': 'str',
        'description_short': 'str',
        'description_html': 'str',
        'starts_at': 'str',
        'ends_at': 'str',
        'categories': 'list[CategoryInclude]',
        'location': 'LocationInclude',
        'poster_image_url': 'str',
        'properties': 'list[str]',
        'custom': 'object',
        'questions': 'list[QuestionInclude]',
        'access_status': 'str',
        'age_limit': 'str',
        'tickets_limit': 'int',
        'personal_links': 'list[str]',
        'personal_link_title': 'bool',
        'is_sending_free_tickets': 'bool',
        'reservation_period': 'int'
    }

    attribute_map = {
        'ticket_types': 'ticket_types',
        'name': 'name',
        'description_short': 'description_short',
        'description_html': 'description_html',
        'starts_at': 'starts_at',
        'ends_at': 'ends_at',
        'categories': 'categories',
        'location': 'location',
        'poster_image_url': 'poster_image_url',
        'properties': 'properties',
        'custom': 'custom',
        'questions': 'questions',
        'access_status': 'access_status',
        'age_limit': 'age_limit',
        'tickets_limit': 'tickets_limit',
        'personal_links': 'personal_links',
        'personal_link_title': 'personal_link_title',
        'is_sending_free_tickets': 'is_sending_free_tickets',
        'reservation_period': 'reservation_period'
    }

    def __init__(self, ticket_types=None, name=None, description_short=None, description_html=None, starts_at=None, ends_at=None, categories=None, location=None, poster_image_url=None, properties=None, custom=None, questions=None, access_status=None, age_limit=None, tickets_limit=None, personal_links=None, personal_link_title=None, is_sending_free_tickets=None, reservation_period=None):  # noqa: E501
        """EditEvent - a model defined in Swagger"""  # noqa: E501
        self._ticket_types = None
        self._name = None
        self._description_short = None
        self._description_html = None
        self._starts_at = None
        self._ends_at = None
        self._categories = None
        self._location = None
        self._poster_image_url = None
        self._properties = None
        self._custom = None
        self._questions = None
        self._access_status = None
        self._age_limit = None
        self._tickets_limit = None
        self._personal_links = None
        self._personal_link_title = None
        self._is_sending_free_tickets = None
        self._reservation_period = None
        self.discriminator = None
        if ticket_types is not None:
            self.ticket_types = ticket_types
        if name is not None:
            self.name = name
        if description_short is not None:
            self.description_short = description_short
        if description_html is not None:
            self.description_html = description_html
        if starts_at is not None:
            self.starts_at = starts_at
        if ends_at is not None:
            self.ends_at = ends_at
        if categories is not None:
            self.categories = categories
        if location is not None:
            self.location = location
        if poster_image_url is not None:
            self.poster_image_url = poster_image_url
        if properties is not None:
            self.properties = properties
        if custom is not None:
            self.custom = custom
        if questions is not None:
            self.questions = questions
        if access_status is not None:
            self.access_status = access_status
        if age_limit is not None:
            self.age_limit = age_limit
        if tickets_limit is not None:
            self.tickets_limit = tickets_limit
        if personal_links is not None:
            self.personal_links = personal_links
        if personal_link_title is not None:
            self.personal_link_title = personal_link_title
        if is_sending_free_tickets is not None:
            self.is_sending_free_tickets = is_sending_free_tickets
        if reservation_period is not None:
            self.reservation_period = reservation_period

    @property
    def ticket_types(self):
        """Gets the ticket_types of this EditEvent.  # noqa: E501

        Список видов билетов  # noqa: E501

        :return: The ticket_types of this EditEvent.  # noqa: E501
        :rtype: list[TicketTypeRequest]
        """
        return self._ticket_types

    @ticket_types.setter
    def ticket_types(self, ticket_types):
        """Sets the ticket_types of this EditEvent.

        Список видов билетов  # noqa: E501

        :param ticket_types: The ticket_types of this EditEvent.  # noqa: E501
        :type: list[TicketTypeRequest]
        """

        self._ticket_types = ticket_types

    @property
    def name(self):
        """Gets the name of this EditEvent.  # noqa: E501

        Название события  # noqa: E501

        :return: The name of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditEvent.

        Название события  # noqa: E501

        :param name: The name of this EditEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description_short(self):
        """Gets the description_short of this EditEvent.  # noqa: E501

        Краткое описание/подзаголовок события  # noqa: E501

        :return: The description_short of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this EditEvent.

        Краткое описание/подзаголовок события  # noqa: E501

        :param description_short: The description_short of this EditEvent.  # noqa: E501
        :type: str
        """

        self._description_short = description_short

    @property
    def description_html(self):
        """Gets the description_html of this EditEvent.  # noqa: E501

        Полное описание с html-тегами  # noqa: E501

        :return: The description_html of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._description_html

    @description_html.setter
    def description_html(self, description_html):
        """Sets the description_html of this EditEvent.

        Полное описание с html-тегами  # noqa: E501

        :param description_html: The description_html of this EditEvent.  # noqa: E501
        :type: str
        """

        self._description_html = description_html

    @property
    def starts_at(self):
        """Gets the starts_at of this EditEvent.  # noqa: E501

        Дата начала события в формате ISO  # noqa: E501

        :return: The starts_at of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this EditEvent.

        Дата начала события в формате ISO  # noqa: E501

        :param starts_at: The starts_at of this EditEvent.  # noqa: E501
        :type: str
        """

        self._starts_at = starts_at

    @property
    def ends_at(self):
        """Gets the ends_at of this EditEvent.  # noqa: E501

        Дата окончания события в формате ISO  # noqa: E501

        :return: The ends_at of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this EditEvent.

        Дата окончания события в формате ISO  # noqa: E501

        :param ends_at: The ends_at of this EditEvent.  # noqa: E501
        :type: str
        """

        self._ends_at = ends_at

    @property
    def categories(self):
        """Gets the categories of this EditEvent.  # noqa: E501

        Список категорий, в которые входит событие  # noqa: E501

        :return: The categories of this EditEvent.  # noqa: E501
        :rtype: list[CategoryInclude]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this EditEvent.

        Список категорий, в которые входит событие  # noqa: E501

        :param categories: The categories of this EditEvent.  # noqa: E501
        :type: list[CategoryInclude]
        """

        self._categories = categories

    @property
    def location(self):
        """Gets the location of this EditEvent.  # noqa: E501


        :return: The location of this EditEvent.  # noqa: E501
        :rtype: LocationInclude
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EditEvent.


        :param location: The location of this EditEvent.  # noqa: E501
        :type: LocationInclude
        """

        self._location = location

    @property
    def poster_image_url(self):
        """Gets the poster_image_url of this EditEvent.  # noqa: E501

        URL картинки события  # noqa: E501

        :return: The poster_image_url of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._poster_image_url

    @poster_image_url.setter
    def poster_image_url(self, poster_image_url):
        """Sets the poster_image_url of this EditEvent.

        URL картинки события  # noqa: E501

        :param poster_image_url: The poster_image_url of this EditEvent.  # noqa: E501
        :type: str
        """

        self._poster_image_url = poster_image_url

    @property
    def properties(self):
        """Gets the properties of this EditEvent.  # noqa: E501

        Список настроек события (например, мультианкета)  # noqa: E501

        :return: The properties of this EditEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EditEvent.

        Список настроек события (например, мультианкета)  # noqa: E501

        :param properties: The properties of this EditEvent.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def custom(self):
        """Gets the custom of this EditEvent.  # noqa: E501

        Объект с дополнительными полями, специфичными для данной организации  # noqa: E501

        :return: The custom of this EditEvent.  # noqa: E501
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this EditEvent.

        Объект с дополнительными полями, специфичными для данной организации  # noqa: E501

        :param custom: The custom of this EditEvent.  # noqa: E501
        :type: object
        """

        self._custom = custom

    @property
    def questions(self):
        """Gets the questions of this EditEvent.  # noqa: E501

        Список вопросов в анкете регистрации  # noqa: E501

        :return: The questions of this EditEvent.  # noqa: E501
        :rtype: list[QuestionInclude]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this EditEvent.

        Список вопросов в анкете регистрации  # noqa: E501

        :param questions: The questions of this EditEvent.  # noqa: E501
        :type: list[QuestionInclude]
        """

        self._questions = questions

    @property
    def access_status(self):
        """Gets the access_status of this EditEvent.  # noqa: E501

        Статус доступа к событию  # noqa: E501

        :return: The access_status of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._access_status

    @access_status.setter
    def access_status(self, access_status):
        """Sets the access_status of this EditEvent.

        Статус доступа к событию  # noqa: E501

        :param access_status: The access_status of this EditEvent.  # noqa: E501
        :type: str
        """

        self._access_status = access_status

    @property
    def age_limit(self):
        """Gets the age_limit of this EditEvent.  # noqa: E501

        Возрастное ограничение события  # noqa: E501

        :return: The age_limit of this EditEvent.  # noqa: E501
        :rtype: str
        """
        return self._age_limit

    @age_limit.setter
    def age_limit(self, age_limit):
        """Sets the age_limit of this EditEvent.

        Возрастное ограничение события  # noqa: E501

        :param age_limit: The age_limit of this EditEvent.  # noqa: E501
        :type: str
        """

        self._age_limit = age_limit

    @property
    def tickets_limit(self):
        """Gets the tickets_limit of this EditEvent.  # noqa: E501

        Максимальное количество человек, которые могут посетить событие. При достижении этого количества регистрация на событие закроется, даже если будут открытыми категории регистрации. Поставьте 0, чтобы снять ограничение. Учитывается количество как оплаченных, так и забронированных билетов.  # noqa: E501

        :return: The tickets_limit of this EditEvent.  # noqa: E501
        :rtype: int
        """
        return self._tickets_limit

    @tickets_limit.setter
    def tickets_limit(self, tickets_limit):
        """Sets the tickets_limit of this EditEvent.

        Максимальное количество человек, которые могут посетить событие. При достижении этого количества регистрация на событие закроется, даже если будут открытыми категории регистрации. Поставьте 0, чтобы снять ограничение. Учитывается количество как оплаченных, так и забронированных билетов.  # noqa: E501

        :param tickets_limit: The tickets_limit of this EditEvent.  # noqa: E501
        :type: int
        """

        self._tickets_limit = tickets_limit

    @property
    def personal_links(self):
        """Gets the personal_links of this EditEvent.  # noqa: E501

        Список персональных ссылок для билетов  # noqa: E501

        :return: The personal_links of this EditEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._personal_links

    @personal_links.setter
    def personal_links(self, personal_links):
        """Sets the personal_links of this EditEvent.

        Список персональных ссылок для билетов  # noqa: E501

        :param personal_links: The personal_links of this EditEvent.  # noqa: E501
        :type: list[str]
        """

        self._personal_links = personal_links

    @property
    def personal_link_title(self):
        """Gets the personal_link_title of this EditEvent.  # noqa: E501

        Заголовок персональной ссылки (Например: Ваша ссылка на онлайн-трансляцию)  # noqa: E501

        :return: The personal_link_title of this EditEvent.  # noqa: E501
        :rtype: bool
        """
        return self._personal_link_title

    @personal_link_title.setter
    def personal_link_title(self, personal_link_title):
        """Sets the personal_link_title of this EditEvent.

        Заголовок персональной ссылки (Например: Ваша ссылка на онлайн-трансляцию)  # noqa: E501

        :param personal_link_title: The personal_link_title of this EditEvent.  # noqa: E501
        :type: bool
        """

        self._personal_link_title = personal_link_title

    @property
    def is_sending_free_tickets(self):
        """Gets the is_sending_free_tickets of this EditEvent.  # noqa: E501

        Отправлять билеты на бесплатные регистрации  # noqa: E501

        :return: The is_sending_free_tickets of this EditEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_sending_free_tickets

    @is_sending_free_tickets.setter
    def is_sending_free_tickets(self, is_sending_free_tickets):
        """Sets the is_sending_free_tickets of this EditEvent.

        Отправлять билеты на бесплатные регистрации  # noqa: E501

        :param is_sending_free_tickets: The is_sending_free_tickets of this EditEvent.  # noqa: E501
        :type: bool
        """

        self._is_sending_free_tickets = is_sending_free_tickets

    @property
    def reservation_period(self):
        """Gets the reservation_period of this EditEvent.  # noqa: E501

        Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку  # noqa: E501

        :return: The reservation_period of this EditEvent.  # noqa: E501
        :rtype: int
        """
        return self._reservation_period

    @reservation_period.setter
    def reservation_period(self, reservation_period):
        """Sets the reservation_period of this EditEvent.

        Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку  # noqa: E501

        :param reservation_period: The reservation_period of this EditEvent.  # noqa: E501
        :type: int
        """

        self._reservation_period = reservation_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.category_response import CategoryResponse  # noqa: F401,E501
from timepad.models.image_response import ImageResponse  # noqa: F401,E501
from timepad.models.location_response import LocationResponse  # noqa: F401,E501
from timepad.models.organization_response import OrganizationResponse  # noqa: F401,E501
from timepad.models.question_response import QuestionResponse  # noqa: F401,E501
from timepad.models.registration_data_response import RegistrationDataResponse  # noqa: F401,E501
from timepad.models.ticket_type_response import TicketTypeResponse  # noqa: F401,E501
from timepad.models.widget_response import WidgetResponse  # noqa: F401,E501


class EventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'date',
        'starts_at': 'date',
        'ends_at': 'date',
        'name': 'str',
        'description_short': 'str',
        'description_html': 'str',
        'url': 'str',
        'poster_image': 'ImageResponse',
        'ad_partner_percent': 'int',
        'locale': 'str',
        'location': 'LocationResponse',
        'organization': 'OrganizationResponse',
        'categories': 'list[CategoryResponse]',
        'tickets_limit': 'int',
        'ticket_types': 'list[TicketTypeResponse]',
        'personal_links': 'list[str]',
        'questions': 'list[QuestionResponse]',
        'age_limit': 'str',
        'widgets': 'list[WidgetResponse]',
        'properties': 'list[str]',
        'moderation_status': 'str',
        'access_status': 'str',
        'registration_data': 'RegistrationDataResponse',
        'is_sending_free_tickets': 'bool',
        'personal_link_title': 'str',
        'reservation_period': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'starts_at': 'starts_at',
        'ends_at': 'ends_at',
        'name': 'name',
        'description_short': 'description_short',
        'description_html': 'description_html',
        'url': 'url',
        'poster_image': 'poster_image',
        'ad_partner_percent': 'ad_partner_percent',
        'locale': 'locale',
        'location': 'location',
        'organization': 'organization',
        'categories': 'categories',
        'tickets_limit': 'tickets_limit',
        'ticket_types': 'ticket_types',
        'personal_links': 'personal_links',
        'questions': 'questions',
        'age_limit': 'age_limit',
        'widgets': 'widgets',
        'properties': 'properties',
        'moderation_status': 'moderation_status',
        'access_status': 'access_status',
        'registration_data': 'registration_data',
        'is_sending_free_tickets': 'is_sending_free_tickets',
        'personal_link_title': 'personal_link_title',
        'reservation_period': 'reservation_period'
    }

    def __init__(self, id=None, created_at=None, starts_at=None, ends_at=None, name=None, description_short=None, description_html=None, url=None, poster_image=None, ad_partner_percent=None, locale=None, location=None, organization=None, categories=None, tickets_limit=None, ticket_types=None, personal_links=None, questions=None, age_limit=None, widgets=None, properties=None, moderation_status=None, access_status=None, registration_data=None, is_sending_free_tickets=None, personal_link_title=None, reservation_period=None):  # noqa: E501
        """EventResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._starts_at = None
        self._ends_at = None
        self._name = None
        self._description_short = None
        self._description_html = None
        self._url = None
        self._poster_image = None
        self._ad_partner_percent = None
        self._locale = None
        self._location = None
        self._organization = None
        self._categories = None
        self._tickets_limit = None
        self._ticket_types = None
        self._personal_links = None
        self._questions = None
        self._age_limit = None
        self._widgets = None
        self._properties = None
        self._moderation_status = None
        self._access_status = None
        self._registration_data = None
        self._is_sending_free_tickets = None
        self._personal_link_title = None
        self._reservation_period = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        self.starts_at = starts_at
        if ends_at is not None:
            self.ends_at = ends_at
        self.name = name
        if description_short is not None:
            self.description_short = description_short
        if description_html is not None:
            self.description_html = description_html
        self.url = url
        self.poster_image = poster_image
        if ad_partner_percent is not None:
            self.ad_partner_percent = ad_partner_percent
        if locale is not None:
            self.locale = locale
        if location is not None:
            self.location = location
        if organization is not None:
            self.organization = organization
        self.categories = categories
        if tickets_limit is not None:
            self.tickets_limit = tickets_limit
        if ticket_types is not None:
            self.ticket_types = ticket_types
        if personal_links is not None:
            self.personal_links = personal_links
        if questions is not None:
            self.questions = questions
        if age_limit is not None:
            self.age_limit = age_limit
        if widgets is not None:
            self.widgets = widgets
        if properties is not None:
            self.properties = properties
        self.moderation_status = moderation_status
        if access_status is not None:
            self.access_status = access_status
        if registration_data is not None:
            self.registration_data = registration_data
        if is_sending_free_tickets is not None:
            self.is_sending_free_tickets = is_sending_free_tickets
        if personal_link_title is not None:
            self.personal_link_title = personal_link_title
        if reservation_period is not None:
            self.reservation_period = reservation_period

    @property
    def id(self):
        """Gets the id of this EventResponse.  # noqa: E501

        Уникальный номер события  # noqa: E501

        :return: The id of this EventResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventResponse.

        Уникальный номер события  # noqa: E501

        :param id: The id of this EventResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this EventResponse.  # noqa: E501

        Дата создания события  # noqa: E501

        :return: The created_at of this EventResponse.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventResponse.

        Дата создания события  # noqa: E501

        :param created_at: The created_at of this EventResponse.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def starts_at(self):
        """Gets the starts_at of this EventResponse.  # noqa: E501

        Дата начала события  # noqa: E501

        :return: The starts_at of this EventResponse.  # noqa: E501
        :rtype: date
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this EventResponse.

        Дата начала события  # noqa: E501

        :param starts_at: The starts_at of this EventResponse.  # noqa: E501
        :type: date
        """
        if starts_at is None:
            raise ValueError("Invalid value for `starts_at`, must not be `None`")  # noqa: E501

        self._starts_at = starts_at

    @property
    def ends_at(self):
        """Gets the ends_at of this EventResponse.  # noqa: E501

        Дата конца события  # noqa: E501

        :return: The ends_at of this EventResponse.  # noqa: E501
        :rtype: date
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this EventResponse.

        Дата конца события  # noqa: E501

        :param ends_at: The ends_at of this EventResponse.  # noqa: E501
        :type: date
        """

        self._ends_at = ends_at

    @property
    def name(self):
        """Gets the name of this EventResponse.  # noqa: E501

        Название события  # noqa: E501

        :return: The name of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventResponse.

        Название события  # noqa: E501

        :param name: The name of this EventResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description_short(self):
        """Gets the description_short of this EventResponse.  # noqa: E501

        Короткое описание события или подзаголовок  # noqa: E501

        :return: The description_short of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this EventResponse.

        Короткое описание события или подзаголовок  # noqa: E501

        :param description_short: The description_short of this EventResponse.  # noqa: E501
        :type: str
        """

        self._description_short = description_short

    @property
    def description_html(self):
        """Gets the description_html of this EventResponse.  # noqa: E501

        Полное описание события  # noqa: E501

        :return: The description_html of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_html

    @description_html.setter
    def description_html(self, description_html):
        """Sets the description_html of this EventResponse.

        Полное описание события  # noqa: E501

        :param description_html: The description_html of this EventResponse.  # noqa: E501
        :type: str
        """

        self._description_html = description_html

    @property
    def url(self):
        """Gets the url of this EventResponse.  # noqa: E501

        Адрес события в timepad  # noqa: E501

        :return: The url of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventResponse.

        Адрес события в timepad  # noqa: E501

        :param url: The url of this EventResponse.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def poster_image(self):
        """Gets the poster_image of this EventResponse.  # noqa: E501


        :return: The poster_image of this EventResponse.  # noqa: E501
        :rtype: ImageResponse
        """
        return self._poster_image

    @poster_image.setter
    def poster_image(self, poster_image):
        """Sets the poster_image of this EventResponse.


        :param poster_image: The poster_image of this EventResponse.  # noqa: E501
        :type: ImageResponse
        """
        if poster_image is None:
            raise ValueError("Invalid value for `poster_image`, must not be `None`")  # noqa: E501

        self._poster_image = poster_image

    @property
    def ad_partner_percent(self):
        """Gets the ad_partner_percent of this EventResponse.  # noqa: E501

        Процент, который получают партнёры за продажу билета на это событие  # noqa: E501

        :return: The ad_partner_percent of this EventResponse.  # noqa: E501
        :rtype: int
        """
        return self._ad_partner_percent

    @ad_partner_percent.setter
    def ad_partner_percent(self, ad_partner_percent):
        """Sets the ad_partner_percent of this EventResponse.

        Процент, который получают партнёры за продажу билета на это событие  # noqa: E501

        :param ad_partner_percent: The ad_partner_percent of this EventResponse.  # noqa: E501
        :type: int
        """

        self._ad_partner_percent = ad_partner_percent

    @property
    def locale(self):
        """Gets the locale of this EventResponse.  # noqa: E501

        Язык события по умолчанию  # noqa: E501

        :return: The locale of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this EventResponse.

        Язык события по умолчанию  # noqa: E501

        :param locale: The locale of this EventResponse.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def location(self):
        """Gets the location of this EventResponse.  # noqa: E501


        :return: The location of this EventResponse.  # noqa: E501
        :rtype: LocationResponse
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventResponse.


        :param location: The location of this EventResponse.  # noqa: E501
        :type: LocationResponse
        """

        self._location = location

    @property
    def organization(self):
        """Gets the organization of this EventResponse.  # noqa: E501


        :return: The organization of this EventResponse.  # noqa: E501
        :rtype: OrganizationResponse
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this EventResponse.


        :param organization: The organization of this EventResponse.  # noqa: E501
        :type: OrganizationResponse
        """

        self._organization = organization

    @property
    def categories(self):
        """Gets the categories of this EventResponse.  # noqa: E501

        Категории события  # noqa: E501

        :return: The categories of this EventResponse.  # noqa: E501
        :rtype: list[CategoryResponse]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this EventResponse.

        Категории события  # noqa: E501

        :param categories: The categories of this EventResponse.  # noqa: E501
        :type: list[CategoryResponse]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def tickets_limit(self):
        """Gets the tickets_limit of this EventResponse.  # noqa: E501

        Максимальное количество человек, которые могут посетить событие  # noqa: E501

        :return: The tickets_limit of this EventResponse.  # noqa: E501
        :rtype: int
        """
        return self._tickets_limit

    @tickets_limit.setter
    def tickets_limit(self, tickets_limit):
        """Sets the tickets_limit of this EventResponse.

        Максимальное количество человек, которые могут посетить событие  # noqa: E501

        :param tickets_limit: The tickets_limit of this EventResponse.  # noqa: E501
        :type: int
        """

        self._tickets_limit = tickets_limit

    @property
    def ticket_types(self):
        """Gets the ticket_types of this EventResponse.  # noqa: E501

        Доступные типы билетов  # noqa: E501

        :return: The ticket_types of this EventResponse.  # noqa: E501
        :rtype: list[TicketTypeResponse]
        """
        return self._ticket_types

    @ticket_types.setter
    def ticket_types(self, ticket_types):
        """Sets the ticket_types of this EventResponse.

        Доступные типы билетов  # noqa: E501

        :param ticket_types: The ticket_types of this EventResponse.  # noqa: E501
        :type: list[TicketTypeResponse]
        """

        self._ticket_types = ticket_types

    @property
    def personal_links(self):
        """Gets the personal_links of this EventResponse.  # noqa: E501

        Персональные ссылки. Доступно только при указании токена со разрешением view_private_events  # noqa: E501

        :return: The personal_links of this EventResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._personal_links

    @personal_links.setter
    def personal_links(self, personal_links):
        """Sets the personal_links of this EventResponse.

        Персональные ссылки. Доступно только при указании токена со разрешением view_private_events  # noqa: E501

        :param personal_links: The personal_links of this EventResponse.  # noqa: E501
        :type: list[str]
        """

        self._personal_links = personal_links

    @property
    def questions(self):
        """Gets the questions of this EventResponse.  # noqa: E501

        Вопросы, задающиеся при регистрации  # noqa: E501

        :return: The questions of this EventResponse.  # noqa: E501
        :rtype: list[QuestionResponse]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this EventResponse.

        Вопросы, задающиеся при регистрации  # noqa: E501

        :param questions: The questions of this EventResponse.  # noqa: E501
        :type: list[QuestionResponse]
        """

        self._questions = questions

    @property
    def age_limit(self):
        """Gets the age_limit of this EventResponse.  # noqa: E501

        Возрастное ограничение события  # noqa: E501

        :return: The age_limit of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._age_limit

    @age_limit.setter
    def age_limit(self, age_limit):
        """Sets the age_limit of this EventResponse.

        Возрастное ограничение события  # noqa: E501

        :param age_limit: The age_limit of this EventResponse.  # noqa: E501
        :type: str
        """

        self._age_limit = age_limit

    @property
    def widgets(self):
        """Gets the widgets of this EventResponse.  # noqa: E501

        Виджеты, доступные для события  # noqa: E501

        :return: The widgets of this EventResponse.  # noqa: E501
        :rtype: list[WidgetResponse]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this EventResponse.

        Виджеты, доступные для события  # noqa: E501

        :param widgets: The widgets of this EventResponse.  # noqa: E501
        :type: list[WidgetResponse]
        """

        self._widgets = widgets

    @property
    def properties(self):
        """Gets the properties of this EventResponse.  # noqa: E501

        Список особенностей события  # noqa: E501

        :return: The properties of this EventResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EventResponse.

        Список особенностей события  # noqa: E501

        :param properties: The properties of this EventResponse.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def moderation_status(self):
        """Gets the moderation_status of this EventResponse.  # noqa: E501

        Статус модерации  # noqa: E501

        :return: The moderation_status of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._moderation_status

    @moderation_status.setter
    def moderation_status(self, moderation_status):
        """Sets the moderation_status of this EventResponse.

        Статус модерации  # noqa: E501

        :param moderation_status: The moderation_status of this EventResponse.  # noqa: E501
        :type: str
        """
        if moderation_status is None:
            raise ValueError("Invalid value for `moderation_status`, must not be `None`")  # noqa: E501

        self._moderation_status = moderation_status

    @property
    def access_status(self):
        """Gets the access_status of this EventResponse.  # noqa: E501

        Статус доступа к событию  # noqa: E501

        :return: The access_status of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_status

    @access_status.setter
    def access_status(self, access_status):
        """Sets the access_status of this EventResponse.

        Статус доступа к событию  # noqa: E501

        :param access_status: The access_status of this EventResponse.  # noqa: E501
        :type: str
        """

        self._access_status = access_status

    @property
    def registration_data(self):
        """Gets the registration_data of this EventResponse.  # noqa: E501


        :return: The registration_data of this EventResponse.  # noqa: E501
        :rtype: RegistrationDataResponse
        """
        return self._registration_data

    @registration_data.setter
    def registration_data(self, registration_data):
        """Sets the registration_data of this EventResponse.


        :param registration_data: The registration_data of this EventResponse.  # noqa: E501
        :type: RegistrationDataResponse
        """

        self._registration_data = registration_data

    @property
    def is_sending_free_tickets(self):
        """Gets the is_sending_free_tickets of this EventResponse.  # noqa: E501

        Отправлять билеты на бесплатные регистрации  # noqa: E501

        :return: The is_sending_free_tickets of this EventResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_sending_free_tickets

    @is_sending_free_tickets.setter
    def is_sending_free_tickets(self, is_sending_free_tickets):
        """Sets the is_sending_free_tickets of this EventResponse.

        Отправлять билеты на бесплатные регистрации  # noqa: E501

        :param is_sending_free_tickets: The is_sending_free_tickets of this EventResponse.  # noqa: E501
        :type: bool
        """

        self._is_sending_free_tickets = is_sending_free_tickets

    @property
    def personal_link_title(self):
        """Gets the personal_link_title of this EventResponse.  # noqa: E501

        Заголовок персональной ссылки. Доступно только при указании токена со разрешением view_private_events  # noqa: E501

        :return: The personal_link_title of this EventResponse.  # noqa: E501
        :rtype: str
        """
        return self._personal_link_title

    @personal_link_title.setter
    def personal_link_title(self, personal_link_title):
        """Sets the personal_link_title of this EventResponse.

        Заголовок персональной ссылки. Доступно только при указании токена со разрешением view_private_events  # noqa: E501

        :param personal_link_title: The personal_link_title of this EventResponse.  # noqa: E501
        :type: str
        """

        self._personal_link_title = personal_link_title

    @property
    def reservation_period(self):
        """Gets the reservation_period of this EventResponse.  # noqa: E501

        Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку  # noqa: E501

        :return: The reservation_period of this EventResponse.  # noqa: E501
        :rtype: int
        """
        return self._reservation_period

    @reservation_period.setter
    def reservation_period(self, reservation_period):
        """Sets the reservation_period of this EventResponse.

        Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку  # noqa: E501

        :param reservation_period: The reservation_period of this EventResponse.  # noqa: E501
        :type: int
        """

        self._reservation_period = reservation_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.answer_response import AnswerResponse  # noqa: F401,E501


class QuestionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id': 'int',
        'name': 'str',
        'comment': 'str',
        'type': 'str',
        'possible_answers': 'list[AnswerResponse]',
        'is_mandatory': 'bool',
        'is_for_every_visitor': 'bool',
        'meta': 'object'
    }

    attribute_map = {
        'field_id': 'field_id',
        'name': 'name',
        'comment': 'comment',
        'type': 'type',
        'possible_answers': 'possible_answers',
        'is_mandatory': 'is_mandatory',
        'is_for_every_visitor': 'is_for_every_visitor',
        'meta': 'meta'
    }

    def __init__(self, field_id=None, name=None, comment=None, type=None, possible_answers=None, is_mandatory=None, is_for_every_visitor=None, meta=None):  # noqa: E501
        """QuestionResponse - a model defined in Swagger"""  # noqa: E501
        self._field_id = None
        self._name = None
        self._comment = None
        self._type = None
        self._possible_answers = None
        self._is_mandatory = None
        self._is_for_every_visitor = None
        self._meta = None
        self.discriminator = None
        self.field_id = field_id
        self.name = name
        if comment is not None:
            self.comment = comment
        self.type = type
        self.possible_answers = possible_answers
        self.is_mandatory = is_mandatory
        self.is_for_every_visitor = is_for_every_visitor
        self.meta = meta

    @property
    def field_id(self):
        """Gets the field_id of this QuestionResponse.  # noqa: E501

        Уникальный текстовый идентификатор вопроса  # noqa: E501

        :return: The field_id of this QuestionResponse.  # noqa: E501
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this QuestionResponse.

        Уникальный текстовый идентификатор вопроса  # noqa: E501

        :param field_id: The field_id of this QuestionResponse.  # noqa: E501
        :type: int
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def name(self):
        """Gets the name of this QuestionResponse.  # noqa: E501

        Текст вопроса  # noqa: E501

        :return: The name of this QuestionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuestionResponse.

        Текст вопроса  # noqa: E501

        :param name: The name of this QuestionResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this QuestionResponse.  # noqa: E501

        Подсказка под вопросом  # noqa: E501

        :return: The comment of this QuestionResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this QuestionResponse.

        Подсказка под вопросом  # noqa: E501

        :param comment: The comment of this QuestionResponse.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def type(self):
        """Gets the type of this QuestionResponse.  # noqa: E501

        Тип вопроса  # noqa: E501

        :return: The type of this QuestionResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuestionResponse.

        Тип вопроса  # noqa: E501

        :param type: The type of this QuestionResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["text", "multiline_text", "select_one", "select_many", "upload", "agree"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def possible_answers(self):
        """Gets the possible_answers of this QuestionResponse.  # noqa: E501

        Список предлагаемых ответов (если вопрос предполагает такой список)  # noqa: E501

        :return: The possible_answers of this QuestionResponse.  # noqa: E501
        :rtype: list[AnswerResponse]
        """
        return self._possible_answers

    @possible_answers.setter
    def possible_answers(self, possible_answers):
        """Sets the possible_answers of this QuestionResponse.

        Список предлагаемых ответов (если вопрос предполагает такой список)  # noqa: E501

        :param possible_answers: The possible_answers of this QuestionResponse.  # noqa: E501
        :type: list[AnswerResponse]
        """
        if possible_answers is None:
            raise ValueError("Invalid value for `possible_answers`, must not be `None`")  # noqa: E501

        self._possible_answers = possible_answers

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this QuestionResponse.  # noqa: E501

        Является ли ответ на вопрос обязательным  # noqa: E501

        :return: The is_mandatory of this QuestionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this QuestionResponse.

        Является ли ответ на вопрос обязательным  # noqa: E501

        :param is_mandatory: The is_mandatory of this QuestionResponse.  # noqa: E501
        :type: bool
        """
        if is_mandatory is None:
            raise ValueError("Invalid value for `is_mandatory`, must not be `None`")  # noqa: E501

        self._is_mandatory = is_mandatory

    @property
    def is_for_every_visitor(self):
        """Gets the is_for_every_visitor of this QuestionResponse.  # noqa: E501

        Выводить вопрос отдельно для каждого купленного билета  # noqa: E501

        :return: The is_for_every_visitor of this QuestionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_for_every_visitor

    @is_for_every_visitor.setter
    def is_for_every_visitor(self, is_for_every_visitor):
        """Sets the is_for_every_visitor of this QuestionResponse.

        Выводить вопрос отдельно для каждого купленного билета  # noqa: E501

        :param is_for_every_visitor: The is_for_every_visitor of this QuestionResponse.  # noqa: E501
        :type: bool
        """
        if is_for_every_visitor is None:
            raise ValueError("Invalid value for `is_for_every_visitor`, must not be `None`")  # noqa: E501

        self._is_for_every_visitor = is_for_every_visitor

    @property
    def meta(self):
        """Gets the meta of this QuestionResponse.  # noqa: E501

        Дополнительные данные  # noqa: E501

        :return: The meta of this QuestionResponse.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this QuestionResponse.

        Дополнительные данные  # noqa: E501

        :param meta: The meta of this QuestionResponse.  # noqa: E501
        :type: object
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

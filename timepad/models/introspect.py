# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from timepad.models.organization_response import OrganizationResponse  # noqa: F401,E501
from timepad.models.registration_order_response import RegistrationOrderResponse  # noqa: F401,E501


class Introspect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'client_id': 'str',
        'user_id': 'str',
        'user_email': 'str',
        'organizations': 'list[OrganizationResponse]',
        'orders': 'list[RegistrationOrderResponse]'
    }

    attribute_map = {
        'active': 'active',
        'client_id': 'client_id',
        'user_id': 'user_id',
        'user_email': 'user_email',
        'organizations': 'organizations',
        'orders': 'orders'
    }

    def __init__(self, active=None, client_id=None, user_id=None, user_email=None, organizations=None, orders=None):  # noqa: E501
        """Introspect - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._client_id = None
        self._user_id = None
        self._user_email = None
        self._organizations = None
        self._orders = None
        self.discriminator = None
        self.active = active
        self.client_id = client_id
        self.user_id = user_id
        self.user_email = user_email
        self.organizations = organizations
        if orders is not None:
            self.orders = orders

    @property
    def active(self):
        """Gets the active of this Introspect.  # noqa: E501

        Действует ли этот токен  # noqa: E501

        :return: The active of this Introspect.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Introspect.

        Действует ли этот токен  # noqa: E501

        :param active: The active of this Introspect.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def client_id(self):
        """Gets the client_id of this Introspect.  # noqa: E501

        Идентификатор клиента API, которым получен токен  # noqa: E501

        :return: The client_id of this Introspect.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Introspect.

        Идентификатор клиента API, которым получен токен  # noqa: E501

        :param client_id: The client_id of this Introspect.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def user_id(self):
        """Gets the user_id of this Introspect.  # noqa: E501

        Идентификатор пользователя, которым получен токен  # noqa: E501

        :return: The user_id of this Introspect.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Introspect.

        Идентификатор пользователя, которым получен токен  # noqa: E501

        :param user_id: The user_id of this Introspect.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_email(self):
        """Gets the user_email of this Introspect.  # noqa: E501

        Электронная почта пользователя, которым получен токен  # noqa: E501

        :return: The user_email of this Introspect.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this Introspect.

        Электронная почта пользователя, которым получен токен  # noqa: E501

        :param user_email: The user_email of this Introspect.  # noqa: E501
        :type: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def organizations(self):
        """Gets the organizations of this Introspect.  # noqa: E501

        Организации, к которым есть доступ у пользователя  # noqa: E501

        :return: The organizations of this Introspect.  # noqa: E501
        :rtype: list[OrganizationResponse]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this Introspect.

        Организации, к которым есть доступ у пользователя  # noqa: E501

        :param organizations: The organizations of this Introspect.  # noqa: E501
        :type: list[OrganizationResponse]
        """
        if organizations is None:
            raise ValueError("Invalid value for `organizations`, must not be `None`")  # noqa: E501

        self._organizations = organizations

    @property
    def orders(self):
        """Gets the orders of this Introspect.  # noqa: E501

        Заказы, которые пользователь сделал в системе  # noqa: E501

        :return: The orders of this Introspect.  # noqa: E501
        :rtype: list[RegistrationOrderResponse]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this Introspect.

        Заказы, которые пользователь сделал в системе  # noqa: E501

        :param orders: The orders of this Introspect.  # noqa: E501
        :type: list[RegistrationOrderResponse]
        """

        self._orders = orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Introspect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Introspect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

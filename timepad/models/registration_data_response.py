# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RegistrationDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price_max': 'float',
        'price_min': 'float',
        'sale_ends_at': 'date',
        'tickets_total': 'int',
        'tickets_limit': 'int',
        'is_registration_open': 'bool'
    }

    attribute_map = {
        'price_max': 'price_max',
        'price_min': 'price_min',
        'sale_ends_at': 'sale_ends_at',
        'tickets_total': 'tickets_total',
        'tickets_limit': 'tickets_limit',
        'is_registration_open': 'is_registration_open'
    }

    def __init__(self, price_max=None, price_min=None, sale_ends_at=None, tickets_total=None, tickets_limit=None, is_registration_open=None):  # noqa: E501
        """RegistrationDataResponse - a model defined in Swagger"""  # noqa: E501
        self._price_max = None
        self._price_min = None
        self._sale_ends_at = None
        self._tickets_total = None
        self._tickets_limit = None
        self._is_registration_open = None
        self.discriminator = None
        self.price_max = price_max
        self.price_min = price_min
        self.sale_ends_at = sale_ends_at
        self.tickets_total = tickets_total
        self.tickets_limit = tickets_limit
        self.is_registration_open = is_registration_open

    @property
    def price_max(self):
        """Gets the price_max of this RegistrationDataResponse.  # noqa: E501

        Цена самого дорогого билета  # noqa: E501

        :return: The price_max of this RegistrationDataResponse.  # noqa: E501
        :rtype: float
        """
        return self._price_max

    @price_max.setter
    def price_max(self, price_max):
        """Sets the price_max of this RegistrationDataResponse.

        Цена самого дорогого билета  # noqa: E501

        :param price_max: The price_max of this RegistrationDataResponse.  # noqa: E501
        :type: float
        """
        if price_max is None:
            raise ValueError("Invalid value for `price_max`, must not be `None`")  # noqa: E501

        self._price_max = price_max

    @property
    def price_min(self):
        """Gets the price_min of this RegistrationDataResponse.  # noqa: E501

        Цена самого дешёвого билета  # noqa: E501

        :return: The price_min of this RegistrationDataResponse.  # noqa: E501
        :rtype: float
        """
        return self._price_min

    @price_min.setter
    def price_min(self, price_min):
        """Sets the price_min of this RegistrationDataResponse.

        Цена самого дешёвого билета  # noqa: E501

        :param price_min: The price_min of this RegistrationDataResponse.  # noqa: E501
        :type: float
        """
        if price_min is None:
            raise ValueError("Invalid value for `price_min`, must not be `None`")  # noqa: E501

        self._price_min = price_min

    @property
    def sale_ends_at(self):
        """Gets the sale_ends_at of this RegistrationDataResponse.  # noqa: E501

        Дата окончания продажи последней категории билета  # noqa: E501

        :return: The sale_ends_at of this RegistrationDataResponse.  # noqa: E501
        :rtype: date
        """
        return self._sale_ends_at

    @sale_ends_at.setter
    def sale_ends_at(self, sale_ends_at):
        """Sets the sale_ends_at of this RegistrationDataResponse.

        Дата окончания продажи последней категории билета  # noqa: E501

        :param sale_ends_at: The sale_ends_at of this RegistrationDataResponse.  # noqa: E501
        :type: date
        """
        if sale_ends_at is None:
            raise ValueError("Invalid value for `sale_ends_at`, must not be `None`")  # noqa: E501

        self._sale_ends_at = sale_ends_at

    @property
    def tickets_total(self):
        """Gets the tickets_total of this RegistrationDataResponse.  # noqa: E501

        Количество забронированных, проданных и бесплатных билетов  # noqa: E501

        :return: The tickets_total of this RegistrationDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._tickets_total

    @tickets_total.setter
    def tickets_total(self, tickets_total):
        """Sets the tickets_total of this RegistrationDataResponse.

        Количество забронированных, проданных и бесплатных билетов  # noqa: E501

        :param tickets_total: The tickets_total of this RegistrationDataResponse.  # noqa: E501
        :type: int
        """
        if tickets_total is None:
            raise ValueError("Invalid value for `tickets_total`, must not be `None`")  # noqa: E501

        self._tickets_total = tickets_total

    @property
    def tickets_limit(self):
        """Gets the tickets_limit of this RegistrationDataResponse.  # noqa: E501

        Максимальное количество доступных билетов, независимо от типа билета  # noqa: E501

        :return: The tickets_limit of this RegistrationDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._tickets_limit

    @tickets_limit.setter
    def tickets_limit(self, tickets_limit):
        """Sets the tickets_limit of this RegistrationDataResponse.

        Максимальное количество доступных билетов, независимо от типа билета  # noqa: E501

        :param tickets_limit: The tickets_limit of this RegistrationDataResponse.  # noqa: E501
        :type: int
        """
        if tickets_limit is None:
            raise ValueError("Invalid value for `tickets_limit`, must not be `None`")  # noqa: E501

        self._tickets_limit = tickets_limit

    @property
    def is_registration_open(self):
        """Gets the is_registration_open of this RegistrationDataResponse.  # noqa: E501

        Открыта ли регистрация  # noqa: E501

        :return: The is_registration_open of this RegistrationDataResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_registration_open

    @is_registration_open.setter
    def is_registration_open(self, is_registration_open):
        """Sets the is_registration_open of this RegistrationDataResponse.

        Открыта ли регистрация  # noqa: E501

        :param is_registration_open: The is_registration_open of this RegistrationDataResponse.  # noqa: E501
        :type: bool
        """
        if is_registration_open is None:
            raise ValueError("Invalid value for `is_registration_open`, must not be `None`")  # noqa: E501

        self._is_registration_open = is_registration_open

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistrationDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationDataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CodesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ean13': 'str',
        'ean8': 'str',
        'printed_code': 'str'
    }

    attribute_map = {
        'ean13': 'ean13',
        'ean8': 'ean8',
        'printed_code': 'printed_code'
    }

    def __init__(self, ean13=None, ean8=None, printed_code=None):  # noqa: E501
        """CodesResponse - a model defined in Swagger"""  # noqa: E501
        self._ean13 = None
        self._ean8 = None
        self._printed_code = None
        self.discriminator = None
        if ean13 is not None:
            self.ean13 = ean13
        if ean8 is not None:
            self.ean8 = ean8
        if printed_code is not None:
            self.printed_code = printed_code

    @property
    def ean13(self):
        """Gets the ean13 of this CodesResponse.  # noqa: E501

        ean13 код билета  # noqa: E501

        :return: The ean13 of this CodesResponse.  # noqa: E501
        :rtype: str
        """
        return self._ean13

    @ean13.setter
    def ean13(self, ean13):
        """Sets the ean13 of this CodesResponse.

        ean13 код билета  # noqa: E501

        :param ean13: The ean13 of this CodesResponse.  # noqa: E501
        :type: str
        """

        self._ean13 = ean13

    @property
    def ean8(self):
        """Gets the ean8 of this CodesResponse.  # noqa: E501

        ean8 код билета  # noqa: E501

        :return: The ean8 of this CodesResponse.  # noqa: E501
        :rtype: str
        """
        return self._ean8

    @ean8.setter
    def ean8(self, ean8):
        """Sets the ean8 of this CodesResponse.

        ean8 код билета  # noqa: E501

        :param ean8: The ean8 of this CodesResponse.  # noqa: E501
        :type: str
        """

        self._ean8 = ean8

    @property
    def printed_code(self):
        """Gets the printed_code of this CodesResponse.  # noqa: E501

        Код, который будет напечатан на билете  # noqa: E501

        :return: The printed_code of this CodesResponse.  # noqa: E501
        :rtype: str
        """
        return self._printed_code

    @printed_code.setter
    def printed_code(self, printed_code):
        """Sets the printed_code of this CodesResponse.

        Код, который будет напечатан на билете  # noqa: E501

        :param printed_code: The printed_code of this CodesResponse.  # noqa: E501
        :type: str
        """

        self._printed_code = printed_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

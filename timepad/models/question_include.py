# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class QuestionInclude(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id': 'str',
        'is_mandatory': 'bool',
        'status': 'str',
        'name': 'str',
        'comment': 'str',
        'type': 'str',
        'possible_answers': 'list[str]'
    }

    attribute_map = {
        'field_id': 'field_id',
        'is_mandatory': 'is_mandatory',
        'status': 'status',
        'name': 'name',
        'comment': 'comment',
        'type': 'type',
        'possible_answers': 'possible_answers'
    }

    def __init__(self, field_id=None, is_mandatory=None, status=None, name=None, comment=None, type=None, possible_answers=None):  # noqa: E501
        """QuestionInclude - a model defined in Swagger"""  # noqa: E501
        self._field_id = None
        self._is_mandatory = None
        self._status = None
        self._name = None
        self._comment = None
        self._type = None
        self._possible_answers = None
        self.discriminator = None
        if field_id is not None:
            self.field_id = field_id
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if type is not None:
            self.type = type
        if possible_answers is not None:
            self.possible_answers = possible_answers

    @property
    def field_id(self):
        """Gets the field_id of this QuestionInclude.  # noqa: E501

        Уникальный текстовый идентификатор вопроса  # noqa: E501

        :return: The field_id of this QuestionInclude.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this QuestionInclude.

        Уникальный текстовый идентификатор вопроса  # noqa: E501

        :param field_id: The field_id of this QuestionInclude.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this QuestionInclude.  # noqa: E501

        Является ли ответ на вопрос обязательным  # noqa: E501

        :return: The is_mandatory of this QuestionInclude.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this QuestionInclude.

        Является ли ответ на вопрос обязательным  # noqa: E501

        :param is_mandatory: The is_mandatory of this QuestionInclude.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def status(self):
        """Gets the status of this QuestionInclude.  # noqa: E501

        Статус вопроса  # noqa: E501

        :return: The status of this QuestionInclude.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuestionInclude.

        Статус вопроса  # noqa: E501

        :param status: The status of this QuestionInclude.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def name(self):
        """Gets the name of this QuestionInclude.  # noqa: E501

        Текст вопроса  # noqa: E501

        :return: The name of this QuestionInclude.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuestionInclude.

        Текст вопроса  # noqa: E501

        :param name: The name of this QuestionInclude.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this QuestionInclude.  # noqa: E501

        Подсказка под вопросом  # noqa: E501

        :return: The comment of this QuestionInclude.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this QuestionInclude.

        Подсказка под вопросом  # noqa: E501

        :param comment: The comment of this QuestionInclude.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def type(self):
        """Gets the type of this QuestionInclude.  # noqa: E501

        Тип вопроса  # noqa: E501

        :return: The type of this QuestionInclude.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuestionInclude.

        Тип вопроса  # noqa: E501

        :param type: The type of this QuestionInclude.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def possible_answers(self):
        """Gets the possible_answers of this QuestionInclude.  # noqa: E501

        Список ответов на вопрос  # noqa: E501

        :return: The possible_answers of this QuestionInclude.  # noqa: E501
        :rtype: list[str]
        """
        return self._possible_answers

    @possible_answers.setter
    def possible_answers(self, possible_answers):
        """Sets the possible_answers of this QuestionInclude.

        Список ответов на вопрос  # noqa: E501

        :param possible_answers: The possible_answers of this QuestionInclude.  # noqa: E501
        :type: list[str]
        """

        self._possible_answers = possible_answers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionInclude, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionInclude):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

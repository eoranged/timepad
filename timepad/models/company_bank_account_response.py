# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompanyBankAccountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_name': 'str',
        'account': 'str',
        'bik': 'str',
        'correspondent_account': 'str',
        'kpp': 'str'
    }

    attribute_map = {
        'bank_name': 'bank_name',
        'account': 'account',
        'bik': 'bik',
        'correspondent_account': 'correspondent_account',
        'kpp': 'kpp'
    }

    def __init__(self, bank_name=None, account=None, bik=None, correspondent_account=None, kpp=None):  # noqa: E501
        """CompanyBankAccountResponse - a model defined in Swagger"""  # noqa: E501
        self._bank_name = None
        self._account = None
        self._bik = None
        self._correspondent_account = None
        self._kpp = None
        self.discriminator = None
        if bank_name is not None:
            self.bank_name = bank_name
        if account is not None:
            self.account = account
        if bik is not None:
            self.bik = bik
        if correspondent_account is not None:
            self.correspondent_account = correspondent_account
        if kpp is not None:
            self.kpp = kpp

    @property
    def bank_name(self):
        """Gets the bank_name of this CompanyBankAccountResponse.  # noqa: E501

        Название банка  # noqa: E501

        :return: The bank_name of this CompanyBankAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this CompanyBankAccountResponse.

        Название банка  # noqa: E501

        :param bank_name: The bank_name of this CompanyBankAccountResponse.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def account(self):
        """Gets the account of this CompanyBankAccountResponse.  # noqa: E501

        Номер расчетного счета  # noqa: E501

        :return: The account of this CompanyBankAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CompanyBankAccountResponse.

        Номер расчетного счета  # noqa: E501

        :param account: The account of this CompanyBankAccountResponse.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def bik(self):
        """Gets the bik of this CompanyBankAccountResponse.  # noqa: E501

        БИК  # noqa: E501

        :return: The bik of this CompanyBankAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bik

    @bik.setter
    def bik(self, bik):
        """Sets the bik of this CompanyBankAccountResponse.

        БИК  # noqa: E501

        :param bik: The bik of this CompanyBankAccountResponse.  # noqa: E501
        :type: str
        """

        self._bik = bik

    @property
    def correspondent_account(self):
        """Gets the correspondent_account of this CompanyBankAccountResponse.  # noqa: E501

        Номер корреспондентский счет  # noqa: E501

        :return: The correspondent_account of this CompanyBankAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._correspondent_account

    @correspondent_account.setter
    def correspondent_account(self, correspondent_account):
        """Sets the correspondent_account of this CompanyBankAccountResponse.

        Номер корреспондентский счет  # noqa: E501

        :param correspondent_account: The correspondent_account of this CompanyBankAccountResponse.  # noqa: E501
        :type: str
        """

        self._correspondent_account = correspondent_account

    @property
    def kpp(self):
        """Gets the kpp of this CompanyBankAccountResponse.  # noqa: E501

        КПП  # noqa: E501

        :return: The kpp of this CompanyBankAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._kpp

    @kpp.setter
    def kpp(self, kpp):
        """Sets the kpp of this CompanyBankAccountResponse.

        КПП  # noqa: E501

        :param kpp: The kpp of this CompanyBankAccountResponse.  # noqa: E501
        :type: str
        """

        self._kpp = kpp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyBankAccountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyBankAccountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

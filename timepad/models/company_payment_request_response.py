# coding: utf-8

"""
    Timepad API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompanyPaymentRequestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company_id': 'int',
        'contact_person': 'str',
        'contact_phone': 'str',
        'contact_email': 'str',
        'participants_initial': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'company_id',
        'contact_person': 'contact_person',
        'contact_phone': 'contact_phone',
        'contact_email': 'contact_email',
        'participants_initial': 'participants_initial'
    }

    def __init__(self, id=None, company_id=None, contact_person=None, contact_phone=None, contact_email=None, participants_initial=None):  # noqa: E501
        """CompanyPaymentRequestResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._contact_person = None
        self._contact_phone = None
        self._contact_email = None
        self._participants_initial = None
        self.discriminator = None
        self.id = id
        self.company_id = company_id
        self.contact_person = contact_person
        self.contact_phone = contact_phone
        self.contact_email = contact_email
        if participants_initial is not None:
            self.participants_initial = participants_initial

    @property
    def id(self):
        """Gets the id of this CompanyPaymentRequestResponse.  # noqa: E501

        Уникальный номер реквизитов компании  # noqa: E501

        :return: The id of this CompanyPaymentRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyPaymentRequestResponse.

        Уникальный номер реквизитов компании  # noqa: E501

        :param id: The id of this CompanyPaymentRequestResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this CompanyPaymentRequestResponse.  # noqa: E501

        Уникальный номер реквизитов компании  # noqa: E501

        :return: The company_id of this CompanyPaymentRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyPaymentRequestResponse.

        Уникальный номер реквизитов компании  # noqa: E501

        :param company_id: The company_id of this CompanyPaymentRequestResponse.  # noqa: E501
        :type: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def contact_person(self):
        """Gets the contact_person of this CompanyPaymentRequestResponse.  # noqa: E501

        ФИО контактнкого лица  # noqa: E501

        :return: The contact_person of this CompanyPaymentRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this CompanyPaymentRequestResponse.

        ФИО контактнкого лица  # noqa: E501

        :param contact_person: The contact_person of this CompanyPaymentRequestResponse.  # noqa: E501
        :type: str
        """
        if contact_person is None:
            raise ValueError("Invalid value for `contact_person`, must not be `None`")  # noqa: E501

        self._contact_person = contact_person

    @property
    def contact_phone(self):
        """Gets the contact_phone of this CompanyPaymentRequestResponse.  # noqa: E501

        Телефон контактного лица  # noqa: E501

        :return: The contact_phone of this CompanyPaymentRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this CompanyPaymentRequestResponse.

        Телефон контактного лица  # noqa: E501

        :param contact_phone: The contact_phone of this CompanyPaymentRequestResponse.  # noqa: E501
        :type: str
        """
        if contact_phone is None:
            raise ValueError("Invalid value for `contact_phone`, must not be `None`")  # noqa: E501

        self._contact_phone = contact_phone

    @property
    def contact_email(self):
        """Gets the contact_email of this CompanyPaymentRequestResponse.  # noqa: E501

        Email контактного лица  # noqa: E501

        :return: The contact_email of this CompanyPaymentRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this CompanyPaymentRequestResponse.

        Email контактного лица  # noqa: E501

        :param contact_email: The contact_email of this CompanyPaymentRequestResponse.  # noqa: E501
        :type: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def participants_initial(self):
        """Gets the participants_initial of this CompanyPaymentRequestResponse.  # noqa: E501

        Имена участников  # noqa: E501

        :return: The participants_initial of this CompanyPaymentRequestResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._participants_initial

    @participants_initial.setter
    def participants_initial(self, participants_initial):
        """Sets the participants_initial of this CompanyPaymentRequestResponse.

        Имена участников  # noqa: E501

        :param participants_initial: The participants_initial of this CompanyPaymentRequestResponse.  # noqa: E501
        :type: list[str]
        """

        self._participants_initial = participants_initial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyPaymentRequestResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyPaymentRequestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
